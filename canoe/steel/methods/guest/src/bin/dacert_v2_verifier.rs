// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#![allow(unused_doc_comments)]
#![no_main]

use alloy_primitives::Address;
use alloy_sol_types::{sol, SolValue};
use risc0_steel::{
    ethereum::{EthEvmInput, ETH_HOLESKY_CHAIN_SPEC},
    Contract,
};
use risc0_zkvm::guest::env;

risc0_zkvm::guest::entry!(main);

/// Specify the function to call using the [`sol!`] macro.
/// This parses the Solidity syntax to generate a struct that implements the `SolCall` trait.

sol! {
    struct BatchHeaderV2 {
        bytes32 batchRoot;
        uint32 referenceBlockNumber;
    }

    struct BlobInclusionInfo {
        BlobCertificate blobCertificate;
        uint32 blobIndex;
        bytes inclusionProof;
    }

    struct BlobCertificate {
        BlobHeaderV2 blobHeader;
        bytes signature;
        uint32[] relayKeys;
    }

    struct BlobHeaderV2 {
        uint16 version;
        bytes quorumNumbers;
        BlobCommitment commitment;
        bytes32 paymentHeaderHash;        
    }

    struct G1Point {
        uint256 X;
        uint256 Y;
    }

    // Encoding of field elements is: X[1] * i + X[0]
    struct G2Point {
        uint256[2] X;
        uint256[2] Y;
    }

    struct BlobCommitment {
        G1Point commitment;
        G2Point lengthCommitment;
        G2Point lengthProof;
        uint32 length;
    }

    struct NonSignerStakesAndSignature {
        uint32[] nonSignerQuorumBitmapIndices; 
        G1Point[] nonSignerPubkeys; 
        G1Point[] quorumApks; 
        G2Point apkG2; 
        G1Point sigma; 
        uint32[] quorumApkIndices; 
        uint32[] totalStakeIndices; 
        uint32[][] nonSignerStakeIndices; 
    }

    interface IEigenDACertVerifier { 
        function alwaysReturnsTrue(
            BatchHeaderV2 calldata batchHeader,
            BlobInclusionInfo calldata blobInclusionInfo,
            NonSignerStakesAndSignature calldata nonSignerStakesAndSignature,
            bytes signedQuorumNumbers
        ) external view returns (bool);

        function verifyDACertV2ForZKProof(
            BatchHeaderV2 calldata batchHeader,
            BlobInclusionInfo calldata blobInclusionInfo,
            NonSignerStakesAndSignature calldata nonSignerStakesAndSignature,
            bytes signedQuorumNumbers
        ) external view returns (bool);
    }
}

/// ABI encodable journal data.
sol! {
    struct Journal {
        address contract;
        bytes input;        
        // add chain spec    
    }
}

fn main() {
    // Read the input from the guest environment.
    let input: EthEvmInput = env::read();
    let contract: Address = env::read();
    let batch_header_abi: Vec<u8> = env::read();
    let non_signer_stakes_and_signature_abi: Vec<u8> = env::read();
    let blob_inclusion_info_abi: Vec<u8> = env::read();       
    let expected_result: bool = env::read();
    // take another input called expected result

    let batch_header = BatchHeaderV2::abi_decode(&batch_header_abi, true).expect("deserialize BatchHeaderV2");
    let blob_inclusion_info = BlobInclusionInfo::abi_decode(&blob_inclusion_info_abi, true).expect("deserialize BlobInclusionInfo");
    let non_signer_stakes_and_signature = NonSignerStakesAndSignature::abi_decode(&non_signer_stakes_and_signature_abi, true).expect("deserialize NonSignerStakesAndSignature");    

    // Converts the input into a `EvmEnv` for execution. The `with_chain_spec` method is used
    // to specify the chain configuration. It checks that the state matches the state root in the
    // header provided in the input.
    let env = input.into_env().with_chain_spec(&ETH_HOLESKY_CHAIN_SPEC);

    // Execute the view call; it returns the result in the type generated by the `sol!` macro.        
    let call = IEigenDACertVerifier::alwaysReturnsTrueCall {        
        batchHeader: batch_header,
        blobInclusionInfo: blob_inclusion_info.clone(),
        nonSignerStakesAndSignature: non_signer_stakes_and_signature,
        signedQuorumNumbers: blob_inclusion_info.blobCertificate.blobHeader.quorumNumbers,
    };

    let mut buffer = Vec::new();
    buffer.extend(batch_header_abi);
    buffer.extend(blob_inclusion_info_abi);
    buffer.extend(non_signer_stakes_and_signature_abi);    

    let returns = Contract::new(contract, &env).call_builder(&call).call();
    // attest it to equal to expected result
    assert!(returns._0 == expected_result);

    // Commit the block hash and number used when deriving `view_call_env` to the journal.
    let journal = Journal {
        contract: contract,
        input: buffer.into(),
    };
    env::commit_slice(&journal.abi_encode());
}
