// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#![allow(unused_doc_comments)]
#![no_main]

use alloy_primitives::Address;
use alloy_sol_types::SolValue;
use risc0_steel::{
    ethereum::EthEvmInput,
    Contract,
};
use risc0_zkvm::guest::env;
use canoe_bindings::{
    Journal, BatchHeaderV2, BlobInclusionInfo, NonSignerStakesAndSignature, IEigenDACertMockVerifier,
};

risc0_zkvm::guest::entry!(main);

fn main() {
    // Read the input from the guest environment.
    let input: EthEvmInput = env::read();
    let contract: Address = env::read();
    let batch_header_abi: Vec<u8> = env::read();
    let non_signer_stakes_and_signature_abi: Vec<u8> = env::read();
    let blob_inclusion_info_abi: Vec<u8> = env::read();
    
    let batch_header = BatchHeaderV2::abi_decode(&batch_header_abi).expect("deserialize BatchHeaderV2");
    let blob_inclusion_info = BlobInclusionInfo::abi_decode(&blob_inclusion_info_abi).expect("deserialize BlobInclusionInfo");
    let non_signer_stakes_and_signature = NonSignerStakesAndSignature::abi_decode(&non_signer_stakes_and_signature_abi).expect("deserialize NonSignerStakesAndSignature");    

    // Converts the input into a `EvmEnv` for execution. The `with_chain_spec` method is used
    // to specify the chain configuration. It checks that the state matches the state root in the
    // header provided in the input.
    let env = input.into_env(); //.with_chain_spec(&ETH_HOLESKY_CHAIN_SPEC);

    // Execute the view call; it returns the result in the type generated by the `sol!` macro.        
    let call = IEigenDACertMockVerifier::verifyDACertV2ForZKProofCall {        
        batchHeader: batch_header,
        blobInclusionInfo: blob_inclusion_info.clone(),
        nonSignerStakesAndSignature: non_signer_stakes_and_signature,
        signedQuorumNumbers: blob_inclusion_info.blobCertificate.blobHeader.quorumNumbers,
    };

    let mut buffer = Vec::new();
    buffer.extend(batch_header_abi);
    buffer.extend(blob_inclusion_info_abi);
    buffer.extend(non_signer_stakes_and_signature_abi);    

    let returns = Contract::new(contract, &env).call_builder(&call).call();    

    // Commit the block hash and number used when deriving `view_call_env` to the journal.
    let journal = Journal {
        contractAddress: contract,
        input: buffer.into(),
        blockhash: env.header().seal(),
        output: returns,        
    };
    env::commit_slice(&journal.abi_encode());
}
