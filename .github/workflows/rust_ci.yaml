name: Rust CI

on:
  push:
    branches: [master]
  merge_group:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        justfile-target: [build-native, build-client-for-asterisc]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - run: RISC0_SKIP_BUILD=1 SP1_SKIP_PROGRAM_BUILD=true just ${{ matrix.justfile-target }}
  cargo-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    name: test
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - uses: taiki-e/install-action@nextest
      - name: cargo test
        run: RISC0_SKIP_BUILD=1 SP1_SKIP_PROGRAM_BUILD=true just test
  cargo-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        # TODO: add back cannon and asterisc once we are using them
        # See https://github.com/Layr-Labs/kona/blob/main/.github/workflows/rust_ci.yaml
        target: ["native"]
    name: lint-${{ matrix.target }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - name: Install Rust nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: ${{ matrix.target }}
      - name: Log into ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: fmt + lint
        run: RISC0_SKIP_BUILD=1 SP1_SKIP_PROGRAM_BUILD=true just lint-${{ matrix.target }}
      - name: chown target
        run: |
          sudo chown -R $(id -u):$(id -g) ./target
  cargo-doc:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: doclint
        run: RISC0_SKIP_BUILD=1 SP1_SKIP_PROGRAM_BUILD=true just lint-docs
      - name: doctest
        run: RISC0_SKIP_BUILD=1 SP1_SKIP_PROGRAM_BUILD=true just test-docs
  cargo-hack:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@cargo-hack
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: cargo hack
        run: RISC0_SKIP_BUILD=1 SP1_SKIP_PROGRAM_BUILD=true just hack
  unused-deps:
    runs-on: ubuntu-latest
    timeout-minutes: 5 # machete runs very quickly but need longer timeout to install the tools
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - uses: taiki-e/install-action@v2
        with:
          tool: just, cargo-udeps
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@nightly
      - name: Install cargo-machete
        run: cargo +nightly install cargo-machete
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - run: just unused-deps
